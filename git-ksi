#!/usr/bin/env python3

import re
import sys
import json
from base64 import b64encode
import requests
from hashlib import sha256
from getpass import getpass
from signal import signal, SIGINT, SIG_IGN
from subprocess import check_output, check_call, CalledProcessError, call

# Catena communication constants
URL_BASE = "https://%s@tryout-catena-db.guardtime.net/api/v1/signatures"
HEADER = {"Content-Type": "application/json", "Accept": "application/json"}
SIGN_JSON_BASE = {'dataHash': {'algorithm': 'SHA-256', 'value': None}, 'metadata': {}, 'level': 0}
ID_ASSIGN_JSON_BASE = {"metadata": {}, "signature": None}


class CLIDecor:
    """ CLI output decoration constants """

    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


class KSICommunicator(object):
    """ Class to communicate with KSI Catena middleware """

    def __init__(self, uname, upass):
        """ Class initializer

        :param uname: string username of a KSI user
        :param upass: string password that corresponds
                      to the username above

        """

        self.username = uname
        self.password = upass
        self.uurl = URL_BASE % ("%s:%s" % (uname, upass))

    def sign_with_ksi(self, data, author):
        """ Sign specified string with KSI

        :param data: bytes to sign with KSI
        :param author: string author of a
               commit to sign
        :return: string GUID of a signature in Catena DB

        """

        data_hash = self.__get_data_digest_sha256(data=data)
        req_json = SIGN_JSON_BASE.copy()
        req_json['dataHash']['value'] = data_hash
        req_json['metadata']['Author'] = author
        r = requests.post(self.uurl, headers=HEADER, json=req_json)
        return json.loads(r.text)['id']

    def get_hash_by_guid(self, guid):
        """ Get KSI signature by it's UID from Catena DB

        :param guid - string GUID of a signature
                    to get from Catena DB
        :return: string KSI signature

        """

        url_id = self.uurl + "/" + guid
        r = requests.get(url_id, headers=HEADER)
        return json.loads(r.text)['details']['dataHash']['value']

    def verify_commit_with_guid(self, guid, data):
        """ Verify commit with checksum and UID of corresponding signature

        :param guid: string GUID of a signature to retrieve
        :param data: bytes object to verify (commit checksum)

        :return: boolean verification result
        """
        if self.__get_data_digest_sha256(data) == self.get_hash_by_guid(guid):
            return True
        return False

    @staticmethod
    def __get_data_digest_sha256(data):
        """ Hash bytes object with SHA-256

        Hashes bytes object with SHA-256, encodes
        in base64 and returns result as a string

        :param data: bytes object to hash
        :return: string base64 encoded SHA-256
                 digest of input
        """

        return b64encode(sha256(data).digest()).decode()


def get_user_credentials():
    """ Get KSI credentials from user CLI input

    :return: list of two strings: 0: username,
             1: password

    """

    # temporarily disable ctrl-c while input is active
    s = signal(SIGINT, SIG_IGN)

    # ask user for credentials
    print(" ** Please enter your KSI credentials")
    username = input("username: ")
    password = getpass("password: ")

    # enable ctrl-c back
    signal(SIGINT, s)

    return [username, password]


def get_guid():
    """ Get GUID from user CLI input

    :return: string GUID

    """

    # temporarily disable ctrl-c while input is active
    s = signal(SIGINT, SIG_IGN)

    # ask user for GUID
    print(" ** Please enter GUID of the commit you are pulling: ")
    guid = input("GUID: ")

    # enable ctrl-c back
    signal(SIGINT, s)

    return guid


def init_sign_process():
    """ Initiate signing process

    Get KSI credentials from user and checksum of
    the last GIT commit. Then initialize signing
    process.

    """

    # retrieve SHA1 commit hash and user details
    output = check_output(["git", "show"])

    return KSICommunicator(*get_user_credentials()).sign_with_ksi(*parse_commit_info(output))


def init_verify_process(branch):
    """ Initiate verification process

    Update remote branches index and ask for
    GUID to use for a verification

    :return: list: 1: boolean verification
             result; 2: string commit author
    """

    # update remote branch index
    call(['git', 'fetch'])

    # get information about commit to verify
    output = check_output(['git', 'log', 'origin/%s' % branch])
    info_lst = parse_commit_info(output)

    return [KSICommunicator(*get_user_credentials()).verify_commit_with_guid(get_guid(), info_lst[0]), info_lst[1]]


def parse_commit_info(output):
    """ Parse commit checksum and author from input

    :param output: bytes to parse
    :return: list of bytes and string,
             0: commit checksum, 1: author
    """

    return [output[7:47], re.search(r"Author:.+", output.decode()).group(0)[8:]]


def set_ctrl_c_handler(signum, frame):
    """ Specify ctrl-c handler to prevent interruption of signing process """

    if input(" >> Are you sure you want to quit a signing process? (Y/n): ") == 'Y':
        exit(0)

# set ctrl-c handler
signal(SIGINT, set_ctrl_c_handler)

# are user pulling?
if sys.argv[1] == 'pull':
    try:
        verify_res = init_verify_process(sys.argv[3])
        if verify_res[0]:
            print(" >> verification %ssuccessful%s! Commit author: %s%s%s" %
                  (CLIDecor.GREEN, CLIDecor.END, CLIDecor.BOLD, verify_res[1], CLIDecor.END))

            # pulling successfully verified commit
            call(['git'] + sys.argv[1:])
            exit(0)
        print(" >> verification %sfailed%s! Don't force-pull this commit!" % (CLIDecor.RED, CLIDecor.END))
    except:  # TODO: narrow down exception types
        print(" >> verification is %snot possible%s due to a technical error. Nothing was pulled." %
              (CLIDecor.YELLOW, CLIDecor.END))
else:
    # pipe command to git executable
    try:
        check_call(['git'] + sys.argv[1:])
    except CalledProcessError:
        exit(1)

    # if commit was made or user requested sign it with ksi
    if sys.argv[1] == 'commit' or sys.argv[1] == 'sign':
        try:
            guid = init_sign_process()
            umesg = " >> %ssigned %ssuccessfully%s! GUID: %s%s%s"
            if sys.argv[1] == 'commit':
                print(umesg % ('committed and ', CLIDecor.GREEN, CLIDecor.END, CLIDecor.BOLD, guid, CLIDecor.END))
            else:
                print(umesg % ('', CLIDecor.GREEN, CLIDecor.END, CLIDecor.BOLD, guid, CLIDecor.END))
        except:  # TODO: narrow down exception types
            umesg = " >> %s%sfailed%s to sign! Run '%sgit-ksi sign%s' to sign this commit!"
            if sys.argv[1] == 'commit':
                print(umesg % ('committed but ', CLIDecor.RED, CLIDecor.END, CLIDecor.BOLD, CLIDecor.END))
            else:
                print(umesg % ('', CLIDecor.RED, CLIDecor.END, CLIDecor.BOLD, CLIDecor.END))

